{"version":3,"sources":["Components/ContactsItem/ContactsItem.module.css","Components/Filter/Filter.module.css","Transition/list.module.css","Components/ContactsList/ContactList.module.css","Components/ContactForm/ContactForm.module.css","Transition/pop.module.css","Components/App/App.module.css","Components/ContactsItem/ContactsItem.js","redux/actionsTypes.js","redux/contactsActions.js","Components/ContactsItem/ContactsItemContainer.js","redux/contactsOperations.js","Components/ContactsList/ContactsList.js","redux/selector.js","Components/ContactsList/ContactsListContainer.js","Components/ContactForm/ContactForm.js","Components/ContactForm/ContactFormContainer.js","Components/Filter/Filter.js","Components/Filter/FilterContainer.js","Components/Logo/Logo.js","Components/App/App.js","redux/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","ContactsItem","name","number","id","deleteContact","className","styles","item","type","onClick","button","Type","filterContact","createAction","getContactsStart","getContactsSucess","getContactsError","postContactStart","postContactSuccess","postContactError","deleteContactStart","deleteContactSuccess","deleteContactError","connect","dispatch","Axios","delete","then","catch","error","ContactsList","contacts","filter","filteredContacts","contact","toLowerCase","includes","filterContacts","TransitionGroup","component","list","map","CSSTransition","timeout","unmountOnExit","key","classNames","TransitionList","getContacts","state","getFilter","InitialState","AddContact","contactToAdd","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","some","alert","postContact","reset","onSubmit","this","placeholder","onChange","Component","post","data","ContactForm","Filter","handleFilter","pop","in","length","container","input","contactsActions","Logo","appear","App","fetchContacts","FilterContainer","mapDispatchToProps","get","contactsReducer","createReducer","payload","filterReducer","combineReducers","middlewares","applyMiddleware","thunk","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ae76c83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactsItem_button__3QEuJ\",\"item\":\"ContactsItem_item__2DmOE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__1-6Eh\",\"input\":\"Filter_input__32-qT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"list_enter__5uE9W\",\"enterActive\":\"list_enterActive__2FWyD\",\"exit\":\"list_exit__2SDwI\",\"exitActive\":\"list_exitActive__lWAj-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3dnVZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__3dc9b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1Yk-c\",\"enterActive\":\"pop_enterActive__1iTxV\",\"exit\":\"pop_exit__3Uapw\",\"exitActive\":\"pop_exitActive__3Jgmx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3we9h\"};","import React from \"react\";\nimport styles from \"./ContactsItem.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactsItem = ({ name, number, id, deleteContact }) => {\n  const del = () => deleteContact(id);\n\n  return (\n    <li className={styles.item}>\n      <p>\n         <span> {name} {number}</span>\n        <button type=\"button\" onClick={del} className={styles.button}>\n          Delete\n        </button>\n      </p>\n    </li>\n  );\n};\n\nContactsItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsItem;","export const Type = {\n  FILTER_CONTACT: \"FILTER_CONTACT\",\n\n  GET_CONTACTS_START: \"GET_CONTACTS_START\",\n  GET_CONTACTS_SUCCESS: \"GET_CONTACTS_SUCCES\",\n  GET_CONTACTS_ERROR: \"GET_CONTACTS_ERROR\",\n\n  POST_CONTACT_START: \"POST_CONTACT_START\",\n  POST_CONTACT_SUCCESS: \"POST_CONTACT_SUCCESS\",\n  POST_CONTACT_ERROR: \"POST_CONTACT_ERROR\",\n  \n  DELETE_CONTACT_START: \"DELETE_CONTACT_START\",\n  DELETE_CONTACT_SUCESS: \"DELETE_CONTACT_SUCESS\",\n  DELETE_CONTACT_ERROR: \"DELETE_CONTACT_ERROR\",\n};","import { createAction } from \"@reduxjs/toolkit\";\nimport { Type } from \"./actionsTypes\";\n\nexport const filterContact = createAction(Type.FILTER_CONTACT);\n\nexport const getContactsStart = createAction(Type.GET_CONTACTS_START);\n\nexport const getContactsSucess = createAction(Type.GET_CONTACTS_SUCCESS);\n\nexport const getContactsError = createAction(Type.GET_CONTACTS_ERROR);\n\nexport const postContactStart = createAction(Type.POST_CONTACT_START);\n\nexport const postContactSuccess = createAction(Type.POST_CONTACT_SUCCESS);\n\nexport const postContactError = createAction(Type.POST_CONTACT_ERROR);\n\nexport const deleteContactStart = createAction(Type.DELETE_CONTACT_START);\n\nexport const deleteContactSuccess = createAction(Type.DELETE_CONTACT_SUCESS);\n\nexport const deleteContactError = createAction(Type.DELETE_CONTACT_ERROR);","import ContactsItem from \"./ContactsItem\";\nimport { connect } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contactsOperations\";\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteContact: (id) => dispatch(deleteContact(id)),\n});\n\nexport default connect (null, mapDispatchToProps)(ContactsItem);","import Axios from \"axios\";\nimport {\n  getContactsStart,\n  getContactsSucess,\n  getContactsError,\n  postContactStart,\n  postContactSuccess,\n  postContactError,\n  deleteContactStart,\n  deleteContactSuccess,\n  deleteContactError,\n} from \"./contactsActions\";\n\nexport const fetchContacts = () => (dispatch) => {\n  dispatch(getContactsStart());\n\n  Axios.get(\"http://localhost:4000/contacts\")\n    .then(({ data }) => dispatch(getContactsSucess(data)))\n    .catch((error) => dispatch(getContactsError(error)));\n};\n\nexport const postContact = (contact) => (dispatch) => {\n  dispatch(postContactStart());\n\n  Axios.post(\"http://localhost:4000/contacts\", contact)\n    .then(({ data }) => dispatch(postContactSuccess(data)))\n    .catch((error) => dispatch(postContactError(error)));\n};\n\nexport const deleteContact = (id) => (dispatch) => {\n  dispatch(deleteContactStart());\n\n  Axios.delete(`http://localhost:4000/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch((error) => dispatch(deleteContactError(error)));\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport TransitionList from \"../../Transition/list.module.css\";\nimport styles from \"./ContactList.module.css\";\nimport ContactsItemConnect from \"../ContactsItem/ContactsItemContainer\";\n\nconst filterContacts = (contacts, filter) => {\n  return contacts.filter((contact) =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n};\n\nconst ContactsList = ({ contacts, filter }) => {\n  const filteredContacts = filter ? filterContacts(contacts, filter) : contacts;\n\n  return (\n    <TransitionGroup component=\"ul\" className={styles.list}>\n      {filteredContacts.map(({ name, number, id }) => (\n        <CSSTransition\n          timeout={250}\n          unmountOnExit\n          key={id}\n          classNames={TransitionList}\n        >\n          <ContactsItemConnect name={name} number={number} id={id} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  filter: PropTypes.string.isRequired,\n};","export const getContacts = (state) => state.contacts;\nexport const getFilter = (state) => state.filter;\n","import { connect } from \"react-redux\";\n\nimport ContactsList from \"../ContactsList/ContactsList\";\nimport { getContacts, getFilter } from \"../../redux/selector\";\n\nconst mapStateToProps = (state) => ({\n  contacts: getContacts(state),\n  filter: getFilter(state),\n});\n\nexport default connect(mapStateToProps)(ContactsList);","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\n\r\nconst InitialState = { name: \"\", number: \"\" };\r\n\r\nexport default class AddContact extends Component {\r\n  state = { contactToAdd: { ...InitialState } };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n\r\n    this.setState(({ contactToAdd }) => ({\r\n      contactToAdd: { ...contactToAdd, [name]: value },\r\n    }));\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state.contactToAdd;\r\n\r\n    if (!name) {\r\n      return;\r\n    }\r\n\r\n    if (!number) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      this.props.contacts.some(\r\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(`${name} is already in contact`);\r\n      return;\r\n    }\r\n\r\n    this.props.postContact({ ...this.state.contactToAdd });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ contactToAdd: { ...InitialState } });\r\n  };\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Введите имя\"\r\n          onChange={this.handleChange}\r\n          value={this.state.contactToAdd.name}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          placeholder=\"Введите номер\"\r\n          onChange={this.handleChange}\r\n          value={this.state.contactToAdd.number}\r\n        />\r\n        <button type=\"submit\" className={styles.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddContact.propTypes = {\r\n  postContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n};","import { connect } from \"react-redux\";\r\nimport ContactForm from \"./ContactForm\";\r\nimport { postContact } from \"../../redux/contactsOperations\";\r\nimport { getContacts } from \"../../redux/selector\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  postContact: (contact) => dispatch(postContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition } from \"react-transition-group\";\nimport pop from \"../../Transition/pop.module.css\";\nimport styles from \"./Filter.module.css\";\n\nconst Filter = ({ contacts, filter, handleFilter }) => (\n  <CSSTransition\n    classNames={pop}\n    timeout={250}\n    unmountOnExit\n    in={contacts.length > 1}\n  >\n    <div className={styles.container}>\n      <p>Поиск контакта по имени</p>\n      <input\n        className={styles.input}\n        placeholder=\"Поиск контакта по имени...\"\n        value={filter}\n        onChange={(e) => handleFilter(e.target.value)}\n      />\n    </div>\n  </CSSTransition>\n);\n\nexport default Filter;\n\nFilter.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  filter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};","import Filter from \"./Filter\";\nimport { connect } from \"react-redux\";\nimport * as contactsActions from \"../../redux/contactsActions\";\nimport { getContacts, getFilter } from \"../../redux/selector\";\n\nconst mapStateToProps = (state) => ({\n  contacts: getContacts(state),\n  filter: getFilter(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleFilter: (filter) => dispatch(contactsActions.filterContact(filter)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./Logo.css\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <CSSTransition in timeout={600} classNames=\"Logo\" appear>\r\n      <h1>Phonebook</h1>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default Logo;","import React, { Component } from \"react\";\nimport ContactsList from \"../ContactsList/ContactsListContainer\";\nimport ContactForm from \"../ContactForm/ContactFormContainer\";\nimport FilterContainer from \"../Filter/FilterContainer\";\nimport styles from \"./App.module.css\";\nimport Logo from \"../Logo/Logo\";\nimport { connect } from \"react-redux\";\nimport { fetchContacts } from \"../../redux/contactsOperations\";\nimport PropTypes from \"prop-types\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <Logo  />\n        <ContactForm  />\n        <h2>Contacts</h2>\n        <FilterContainer />\n        <ContactsList />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchContacts: fetchContacts,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n\nApp.propTypes = {\n  fetchContacts: PropTypes.func.isRequired,\n};","import { Type } from \"./actionsTypes\";\nimport { createReducer, combineReducers } from \"@reduxjs/toolkit\";\n\nconst contactsReducer = createReducer([], {\n  [Type.GET_CONTACTS_SUCCESS]: (state, { payload }) => payload,\n  [Type.POST_CONTACT_SUCCESS]: (state, { payload }) => [...state, payload],\n  [Type.DELETE_CONTACT_SUCESS]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer(\"\", {\n  [Type.FILTER_CONTACT]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts: contactsReducer ,\n  filter: filterReducer,\n});","import { createStore, applyMiddleware } from \"@reduxjs/toolkit\";\nimport contactsReducer from \"./contactsReducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nconst middlewares = applyMiddleware(thunk);\n\nconst store = createStore(contactsReducer, composeWithDevTools(middlewares));\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n    \n    "],"sourceRoot":""}